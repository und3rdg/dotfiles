" <VIM-PLUG PLUGINS>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
call plug#begin('~/.vim/plugged')

    Plug 'tpope/vim-sensible' " vim-plug plugin manager

    " GIT PLUGINS
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter' " git dif in gutter(column line number)

    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " <plNERDTREE>
    Plug 'jistr/vim-nerdtree-tabs'

    " Plug 'Valloric/YouCompleteMe' " <plYOUCOMPLETEME>
    Plug 'chrisbra/Colorizer'
    " Plug 'davidhalter/jedi-vim' " python

    Plug 'tpope/vim-commentary'
    Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
    Plug 'tmhedberg/SimpylFold' " <plSIMPLYFOLD>

    " Plug 'christoomey/vim-tmux-navigator'
    Plug 'benmills/vimux' " <plVIMUX>

    " Theme
    Plug 'morhetz/gruvbox'
    Plug 'altercation/vim-colors-solarized'

call plug#end()
" }


" <SETTINGS>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Enable filetype plugins
        filetype plugin on
        filetype indent on

    " Set history
        set history=500

    " Set <so> lines to the cursor and relative numbers
        set so=7
        set relativenumber

    " Areas of the screen where the splits should occur
        set splitbelow
        set splitright

    " Ignore case when searching
    " When searching try to be smart about cases 
    " Highlight search results
    " Makes search act like search in modern browsers
        set ignorecase
        set smartcase
        set hlsearch
        set incsearch 

    " Don't redraw while executing macros (good performance config)
        set lazyredraw 

    " For regular expressions turn magic on
        set magic

    " Show matching brackets when text indicator is over them
    " How many tenths of a second to blink when matching brackets
        set showmatch 
        set mat=2

    " No annoying sound on errors
        set noerrorbells
        set novisualbell
        set t_vb=
        set tm=500

    " Add a bit extra margin to the left
        set foldcolumn=1

        set encoding=utf8

    " Use Unix as the standard file type
        set ffs=unix,dos,mac
" }

" <COLORS> 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Enable syntax highlighting
        syntax enable 

        try
            colorscheme gruvbox
        catch
        endtry

        set background=dark

    " Set extra options when running in GUI mode
        if has("gui_running")
            set guioptions-=T
            set guioptions-=e
            set t_Co=256
            set guitablabel=%M\ %t
        endif
    " Fix no background in tmux
        set t_ut=

        set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<",space:␣
" }


" <FILES, BACKUPS AND UNDO>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Turn backup off, since most stuff is in SVN, git et.c anyway...
        set nobackup
        set nowb
        set noswapfile

    " Set to auto read when a file is changed from the outside
        set autoread
" }


" <TEXT, TAB AND INDENT RELATED>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Use spaces instead of tabs
        set expandtab

    " Be smart when using tabs ;)
        set smarttab

    " 1 tab == 4 spaces
        set shiftwidth=4
        set tabstop=4

    " Linebreak on 500 characters
        set lbr
        set tw=500

        set ai "Auto indent
        set si "Smart indent
        set wrap "Wrap lines

    " highlight in visual stay
        vnoremap > >gv
        vnoremap < <gv
" }


" <MOVING AROUND, TABS, WINDOWS AND BUFFERS>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Treat long lines as break lines (useful when moving around in them)
        map j gj
        map k gk

    " Map ; to : 
        map ; :

    " Disable highlight when <leader><cr> is pressed
        map <silent> <leader><cr> :noh<cr>

    "split navigations
        nnoremap <C-J> <C-W><C-J>
        nnoremap <C-K> <C-W><C-K>
        nnoremap <C-L> <C-W><C-L>
        nnoremap <C-H> <C-W><C-H>
" }


" <FOLDING>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " Enable folding
        set foldmethod=manual
        set foldlevel=99

    " Enable folding with the spacebar
        nnoremap <space> za

    " Want to see the docstrings for folded code?
        let g:SimpylFold_docstring_preview=1 " <plSIMPLYFOLD>
" }


" <HIGHLIGHT ALL INSTANCES OF WORD UNDER CURSOR, WHEN IDLE>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
" useful when studying strange source code.
" type z/ to toggle highlighting on/off.
    nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
    function! AutoHighlightToggle()
      let @/ = ''
      if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
      else
        augroup auto_highlight
          au!
          au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup end
        setl updatetime=500
        echo 'Highlight current word: ON'
        return 1
      endif
    endfunction
" }



" <PLUGINS SETTINGS>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {

    " <plVIMUX RUN COMMAND IN TMUX PANE>
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " map <f8> :call VimuxRunCommand("clear; python3 -i " . bufname("%"))<CR>
        map <f9> :call VimuxRunCommand("clear; ./" . bufname("%"))<CR>

        " Run the current file with rspec
        map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

        " Prompt for a command to run
        map <Leader>vp :VimuxPromptCommand<CR>

        " Run last command executed by VimuxRunCommand
        map <Leader>vl :VimuxRunLastCommand<CR>

        " Inspect runner pane
        map <Leader>vi :VimuxInspectRunner<CR>

        " Close vim tmux runner opened by VimuxRunCommand
        map <Leader>vq :VimuxCloseRunner<CR>

        " Interrupt any command running in the runner pane
        map <Leader>vx :VimuxInterruptRunner<CR>

        " Zoom the runner pane (use <bind-key> z to restore runner pane)
        map <Leader>vz :call VimuxZoomRunner()<CR>
    " }


    " <plNERDTREE>
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
        let NERDTreeShowHidden=1
    " }


    " <plYOUCOMPLETEME AUTOCOMPLETE>
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" {
    " The former line ensures that the autocomplete window goes away when you’re done with it, and the latter defines a shortcut for goto definition.
        " let g:ycm_autoclose_preview_window_after_completion=1
        " map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
    " }

" }
